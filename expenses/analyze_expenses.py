import csv
from collections import defaultdict
from datetime import datetime
import os

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
base_path = os.path.dirname(__file__)
file_path = os.path.join(base_path, 'expenses.csv')

# –í–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
start_str = input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É (—Ä—Ä—Ä—Ä-–º–º-–¥–¥): ")
end_str = input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É (—Ä—Ä—Ä—Ä-–º–º-–¥–¥): ")

try:
    start_date = datetime.strptime(start_str, "%Y-%m-%d").date()
    end_date = datetime.strptime(end_str, "%Y-%m-%d").date()
except ValueError:
    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!")
    exit()
    
# –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —ñ –¥–Ω—è—Ö
category_totals = defaultdict(float)
daily_totals = defaultdict(float)

with open(file_path, 'r', encoding='utf-8') as file:
    reader = csv.reader(file)
    for row in reader:
        if len(row) != 3:
            continue

        name, cost_str, date_str = row
        try:
            cost = float(cost_str)
            date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
        except ValueError:
            continue
        if start_date <= date.date() <= end_date:
            category_totals[name] += cost
            daily_totals[date.date()] += cost

if not daily_totals:
    print("‚ö†Ô∏è –£ –∑–∞–¥–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
    exit()

# –í–∏–≤—ñ–¥
print(f"\nüóì –í–∏—Ç—Ä–∞—Ç–∏ –∑ {start_date} –ø–æ {end_date}:")
print("üìä –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:")
for category, total in category_totals.items():
    print(f"- {category}: {total:.2f} –≥—Ä–Ω")

print("\nüìÜ –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö:")
for day, total in sorted(daily_totals.items()):
    print(f"- {day}: {total:.2f} –≥—Ä–Ω")
    
total_sum = sum(daily_totals.values())
print(f"\nüî∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum:.2f} –≥—Ä–Ω")

